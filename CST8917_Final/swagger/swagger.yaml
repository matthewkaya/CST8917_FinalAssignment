openapi: 3.0.1
info:
  title: Serverless Image Processing API
  description: API documentation for Azure Functions serverless image processing app.
  version: "1.5"

servers:
  - url: https://psychic-eureka-rx9qg75rj4p2pgv5-7071.app.github.dev/api
    description: GitHub Codespaces Local Environment

paths:
  /ping:
    get:
      summary: Health Check
      responses:
        '200':
          description: Server is running

  /user/create:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - firstName
                - lastName
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  message:
                    type: string
        '409':
          description: User already exists
        '400':
          description: Missing required fields

  /user/update:
    put:
      summary: Update user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: Shard key of the user
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: User updated successfully
        '400':
          description: userId (shard key) and update fields are required
        '404':
          description: User not found

  /user/delete:
    delete:
      summary: Delete a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: Shard key of the user to delete
              required:
                - userId
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: userId (shard key) is required
        '404':
          description: User not found

  /user/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expiryDate:
                    type: string
                  userId:
                    type: string
        '401':
          description: Invalid credentials
        '400':
          description: Missing email or password

  /image/upload:
    post:
      summary: Upload an image (Authenticated)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageId:
                    type: string
                  imageName:
                    type: string
                  originalImageUrl:
                    type: string
                  uploadDate:
                    type: string
        '401':
          description: Unauthorized (JWT token missing or invalid)
        '400':
          description: Image file is required



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
        expiryDate:
          type: string
          format: date-time

    Image:
      type: object
      properties:
        imageId:
          type: string
        imageName:
          type: string
        originalImageUrl:
          type: string
        resizedImageUrl:
          type: string
        uploadDate:
          type: string
          format: date-time

    User:
      type: object
      properties:
        userId:
          type: string
          description: MongoDB shard key (userId)
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          description: Hashed user password
        authToken:
          $ref: '#/components/schemas/AuthToken'
        uploadedImages:
          type: array
          items:
            $ref: '#/components/schemas/Image'
            
  SasAccessInfo:
    type: object
    properties:
      sasUrl:
        type: string
        description: |
            A time-limited secure URL (SAS token) for accessing the resized image without making the blob container public.
            This link usually expires after 1 hour and is auto-generated for the user after image resizing.          
